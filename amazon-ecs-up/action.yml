name: Amazon ECS Up
description: Builds, tags, and brings up Docker image on Amazon ECS via docker compose
inputs:
  aws-access-key-id:
    description: secret AWS access key ID
    required: true
  aws-region:
    description: preferred AWS region, e.g. us-east-2
    required: true
  aws-secret-access-key:
    description: secret AWS access key
    required: true
  docker-compose-path:
    description: path to Docker compose YAML file defining ECS deployment config
    required: true
  ecr-repository:
    description: Amazon ECR repository name
    required: true
  ecr-tag:
    description: Amazon ECR image tag value
    required: true

runs:
  using: composite
  steps:
     - name: Checkout org actions
       uses: actions/checkout@v2
       with:
         path: .github/actions

    - name: Install new Docker Compose CLI
      uses: .github/actions/docker-compose-update

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR and bring up container on ECS
      env:
        ECR_IMAGE_URL: ${{ format('{0}/{1}:{2}', steps.ecr-login.outputs.registry, inputs.ecr-repository, inputs.ecr-tag) }}
      run: |
        docker build -t $ECR_IMAGE_URL .
        docker push $ECR_IMAGE_URL
        docker compose -f ${{ inputs.docker-compose-path }} convert
        docker context create ecs deploy --from-env
        docker context use deploy
        docker compose -f ${{ inputs.docker-compose-path }} convert
        docker compose -f ${{ inputs.docker-compose-path }} up
      shell: bash
